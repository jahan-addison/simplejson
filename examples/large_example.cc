
#include <filesystem>
#include <fstream>
#include <iostream>
#include <simplejson.h>
#include <string_view>

namespace fs = std::filesystem;

using json::JSON;

int main()
{
    std::string_view AST =
        "{\n  \"left\" : [{\n      \"left\" : [null],\n      \"node\" : "
        "\"function_definition\",\n      \"right\" : {\n        \"left\" : "
        "[{\n            \"left\" : [{\n                \"node\" : "
        "\"lvalue\",\n                \"root\" : \"j\"\n              }, {\n   "
        "             \"left\" : {\n                  \"node\" : "
        "\"number_literal\",\n                  \"root\" : 20\n                "
        "},\n                \"node\" : \"vector_lvalue\",\n                "
        "\"root\" : \"s\"\n              }, {\n                \"left\" : {\n  "
        "                \"node\" : \"number_literal\",\n                  "
        "\"root\" : 20\n                },\n                \"node\" : "
        "\"vector_lvalue\",\n                \"root\" : \"t\"\n              "
        "}],\n            \"node\" : \"statement\",\n            \"root\" : "
        "\"auto\"\n          }, {\n            \"left\" : [[{\n                "
        "  \"left\" : {\n                    \"node\" : \"lvalue\",\n          "
        "          \"root\" : \"reread\"\n                  },\n               "
        "   \"node\" : \"function_expression\",\n                  \"right\" : "
        "[null],\n                  \"root\" : \"reread\"\n                }], "
        "[{\n                  \"left\" : {\n                    \"node\" : "
        "\"lvalue\",\n                    \"root\" : \"getstr\"\n              "
        "    },\n                  \"node\" : \"function_expression\",\n       "
        "           \"right\" : [{\n                      \"node\" : "
        "\"lvalue\",\n                      \"root\" : \"s\"\n                 "
        "   }],\n                  \"root\" : \"getstr\"\n                }], "
        "[{\n                  \"left\" : {\n                    \"node\" : "
        "\"lvalue\",\n                    \"root\" : \"j\"\n                  "
        "},\n                  \"node\" : \"assignment_expression\",\n         "
        "         \"right\" : {\n                    \"left\" : {\n            "
        "          \"node\" : \"lvalue\",\n                      \"root\" : "
        "\"getarg\"\n                    },\n                    \"node\" : "
        "\"function_expression\",\n                    \"right\" : [{\n        "
        "                \"node\" : \"lvalue\",\n                        "
        "\"root\" : \"t\"\n                      }, {\n                        "
        "\"node\" : \"lvalue\",\n                        \"root\" : \"s\"\n    "
        "                  }, {\n                        \"node\" : "
        "\"number_literal\",\n                        \"root\" : 0\n           "
        "           }],\n                    \"root\" : \"getarg\"\n           "
        "       },\n                  \"root\" : [\"=\", null]\n               "
        " }], [{\n                  \"left\" : {\n                    \"node\" "
        ": \"lvalue\",\n                    \"root\" : \"j\"\n                 "
        " },\n                  \"node\" : \"assignment_expression\",\n        "
        "          \"right\" : {\n                    \"left\" : {\n           "
        "           \"node\" : \"lvalue\",\n                      \"root\" : "
        "\"getarg\"\n                    },\n                    \"node\" : "
        "\"function_expression\",\n                    \"right\" : [{\n        "
        "                \"node\" : \"lvalue\",\n                        "
        "\"root\" : \"t\"\n                      }, {\n                        "
        "\"node\" : \"lvalue\",\n                        \"root\" : \"s\"\n    "
        "                  }, {\n                        \"node\" : "
        "\"lvalue\",\n                        \"root\" : \"j\"\n               "
        "       }],\n                    \"root\" : \"getarg\"\n               "
        "   },\n                  \"root\" : [\"=\", null]\n                "
        "}], [{\n                  \"left\" : {\n                    \"node\" "
        ": \"lvalue\",\n                    \"root\" : \"openr\"\n             "
        "     },\n                  \"node\" : \"function_expression\",\n      "
        "            \"right\" : [{\n                      \"node\" : "
        "\"number_literal\",\n                      \"root\" : 5\n             "
        "       }, {\n                      \"node\" : \"lvalue\",\n           "
        "           \"root\" : \"t\"\n                    }],\n                "
        "  \"root\" : \"openr\"\n                }], [{\n                  "
        "\"left\" : {\n                    \"node\" : \"lvalue\",\n            "
        "        \"root\" : \"getarg\"\n                  },\n                 "
        " \"node\" : \"function_expression\",\n                  \"right\" : "
        "[{\n                      \"node\" : \"lvalue\",\n                    "
        "  \"root\" : \"t\"\n                    }, {\n                      "
        "\"node\" : \"lvalue\",\n                      \"root\" : \"s\"\n      "
        "              }, {\n                      \"node\" : \"lvalue\",\n    "
        "                  \"root\" : \"j\"\n                    }],\n         "
        "         \"root\" : \"getarg\"\n                }], [{\n              "
        "    \"left\" : {\n                    \"node\" : \"lvalue\",\n        "
        "            \"root\" : \"openw\"\n                  },\n              "
        "    \"node\" : \"function_expression\",\n                  \"right\" "
        ": [{\n                      \"node\" : \"number_literal\",\n          "
        "            \"root\" : 6\n                    }, {\n                  "
        "    \"node\" : \"lvalue\",\n                      \"root\" : \"t\"\n  "
        "                  }],\n                  \"root\" : \"openw\"\n       "
        "         }]],\n            \"node\" : \"statement\",\n            "
        "\"root\" : \"rvalue\"\n          }, {\n            \"left\" : {\n     "
        "         \"left\" : {\n                \"left\" : {\n                 "
        " \"node\" : \"lvalue\",\n                  \"root\" : \"putchar\"\n   "
        "             },\n                \"node\" : "
        "\"function_expression\",\n                \"right\" : [{\n            "
        "        \"left\" : {\n                      \"node\" : \"lvalue\",\n  "
        "                    \"root\" : \"getchar\"\n                    },\n  "
        "                  \"node\" : \"function_expression\",\n               "
        "     \"right\" : [null],\n                    \"root\" : "
        "\"getchar\"\n                  }],\n                \"root\" : "
        "\"putchar\"\n              },\n              \"node\" : "
        "\"relation_expression\",\n              \"right\" : {\n               "
        " \"node\" : \"constant_literal\",\n                \"root\" : "
        "\"*e\"\n              },\n              \"root\" : [\"!=\"]\n         "
        "   },\n            \"node\" : \"statement\",\n            \"right\" : "
        "[{\n                \"left\" : [[]],\n                \"node\" : "
        "\"statement\",\n                \"root\" : \"rvalue\"\n              "
        "}],\n            \"root\" : \"while\"\n          }],\n        "
        "\"node\" : \"statement\",\n        \"root\" : \"block\"\n      },\n   "
        "   \"root\" : \"main\"\n    }, {\n      \"left\" : [{\n          "
        "\"node\" : \"lvalue\",\n          \"root\" : \"s\"\n        }, {\n    "
        "      \"node\" : \"lvalue\",\n          \"root\" : \"v\"\n        "
        "}],\n      \"node\" : \"function_definition\",\n      \"right\" : {\n "
        "       \"left\" : [{\n            \"left\" : [{\n                "
        "\"node\" : \"lvalue\",\n                \"root\" : \"m\"\n            "
        "  }, {\n                \"node\" : \"lvalue\",\n                "
        "\"root\" : \"i\"\n              }, {\n                \"node\" : "
        "\"lvalue\",\n                \"root\" : \"j\"\n              }, {\n   "
        "             \"node\" : \"lvalue\",\n                \"root\" : "
        "\"c\"\n              }, {\n                \"node\" : \"lvalue\",\n   "
        "             \"root\" : \"sign\"\n              }],\n            "
        "\"node\" : \"statement\",\n            \"root\" : \"auto\"\n          "
        "}, {\n            \"left\" : [[{\n                  \"left\" : {\n    "
        "                \"node\" : \"lvalue\",\n                    \"root\" "
        ": \"i\"\n                  },\n                  \"node\" : "
        "\"assignment_expression\",\n                  \"right\" : {\n         "
        "           \"node\" : \"lvalue\",\n                    \"root\" : "
        "\"O\"\n                  },\n                  \"root\" : [\"=\", "
        "null]\n                }]],\n            \"node\" : \"statement\",\n  "
        "          \"root\" : \"rvalue\"\n          }, {\n            \"left\" "
        ": [\"init\"],\n            \"node\" : \"statement\",\n            "
        "\"root\" : \"label\"\n          }, {\n            \"left\" : [[{\n    "
        "              \"left\" : {\n                    \"node\" : "
        "\"lvalue\",\n                    \"root\" : \"m\"\n                  "
        "},\n                  \"node\" : \"assignment_expression\",\n         "
        "         \"right\" : {\n                    \"node\" : "
        "\"number_literal\",\n                    \"root\" : 0\n               "
        "   },\n                  \"root\" : [\"=\", null]\n                "
        "}]],\n            \"node\" : \"statement\",\n            \"root\" : "
        "\"rvalue\"\n          }, {\n            \"left\" : [\"loop\"],\n      "
        "      \"node\" : \"statement\",\n            \"root\" : \"label\"\n   "
        "       }, {\n            \"left\" : {\n              \"left\" : {\n   "
        "             \"node\" : \"lvalue\",\n                \"root\" : "
        "\"C\"\n              },\n              \"node\" : "
        "\"assignment_expression\",\n              \"right\" : {\n             "
        "   \"left\" : {\n                  \"node\" : \"lvalue\",\n           "
        "       \"root\" : \"char\"\n                },\n                "
        "\"node\" : \"function_expression\",\n                \"right\" : [{\n "
        "                   \"node\" : \"lvalue\",\n                    "
        "\"root\" : \"s\"\n                  }, {\n                    "
        "\"left\" : {\n                      \"node\" : \"lvalue\",\n          "
        "            \"root\" : \"j\"\n                    },\n                "
        "    \"node\" : \"pre_inc_dec_expression\",\n                    "
        "\"root\" : [\"++\"]\n                  }],\n                \"root\" "
        ": \"char\"\n              },\n              \"root\" : [\"=\", "
        "null]\n            },\n            \"node\" : \"statement\",\n        "
        "    \"right\" : [{\n                \"left\" : {\n                  "
        "\"node\" : \"constant_literal\",\n                  \"root\" : "
        "\"-\"\n                },\n                \"node\" : "
        "\"statement\",\n                \"right\" : [{\n                    "
        "\"left\" : {\n                      \"node\" : \"lvalue\",\n          "
        "            \"root\" : \"sign\"\n                    },\n             "
        "       \"node\" : \"statement\",\n                    \"right\" : "
        "[{\n                        \"left\" : [\"syntax\"],\n                "
        "        \"node\" : \"statement\",\n                        \"root\" : "
        "\"goto\"\n                      }, null],\n                    "
        "\"root\" : \"if\"\n                  }, {\n                    "
        "\"left\" : [[{\n                          \"left\" : {\n              "
        "              \"node\" : \"lvalue\",\n                            "
        "\"root\" : \"s\"\n                          },\n                      "
        "    \"node\" : \"assignment_expression\",\n                          "
        "\"right\" : {\n                            \"node\" : "
        "\"number_literal\",\n                            \"root\" : 1\n       "
        "                   },\n                          \"root\" : [\"=\", "
        "null]\n                        }]],\n                    \"node\" : "
        "\"statement\",\n                    \"root\" : \"rvalue\"\n           "
        "       }],\n                \"root\" : \"case\"\n              }, {\n "
        "               \"left\" : {\n                  \"node\" : "
        "\"constant_literal\",\n                  \"root\" : \"' '\"\n         "
        "       },\n                \"node\" : \"statement\",\n                "
        "\"right\" : [{\n                    \"left\" : [\"loop\"],\n          "
        "          \"node\" : \"statement\",\n                    \"root\" : "
        "\"goto\"\n                  }],\n                \"root\" : "
        "\"case\"\n              }, {\n                \"left\" : {\n          "
        "        \"node\" : \"constant_literal\",\n                  \"root\" "
        ": \"*e\"\n                },\n                \"node\" : "
        "\"statement\",\n                \"right\" : [],\n                "
        "\"root\" : \"case\"\n              }, {\n                \"left\" : "
        "{\n                  \"node\" : \"constant_literal\",\n               "
        "   \"root\" : \",\"\n                },\n                \"node\" : "
        "\"statement\",\n                \"right\" : [{\n                    "
        "\"left\" : [[{\n                          \"left\" : {\n              "
        "              \"left\" : {\n                              \"node\" : "
        "\"post_inc_dec_expression\",\n                              \"right\" "
        ": {\n                                \"node\" : \"lvalue\",\n         "
        "                       \"root\" : \"i\"\n                             "
        " },\n                              \"root\" : [\"++\"]\n              "
        "              },\n                            \"node\" : "
        "\"vector_lvalue\",\n                            \"root\" : \"v\"\n    "
        "                      },\n                          \"node\" : "
        "\"assignment_expression\",\n                          \"right\" : {\n "
        "                           \"left\" : {\n                             "
        " \"node\" : \"evaluated_expression\",\n                              "
        "\"root\" : {\n                                \"left\" : {\n          "
        "                        \"node\" : \"lvalue\",\n                      "
        "            \"root\" : \"m\"\n                                },\n    "
        "                            \"node\" : \"unary_expression\",\n        "
        "                        \"root\" : [\"-\"]\n                          "
        "    }\n                            },\n                            "
        "\"node\" : \"ternary_expression\",\n                            "
        "\"right\" : {\n                              \"node\" : \"lvalue\",\n "
        "                             \"root\" : \"m\"\n                       "
        "     },\n                            \"root\" : {\n                   "
        "           \"node\" : \"lvalue\",\n                              "
        "\"root\" : \"sign\"\n                            }\n                  "
        "        },\n                          \"root\" : [\"=\", null]\n      "
        "                  }]],\n                    \"node\" : "
        "\"statement\",\n                    \"root\" : \"rvalue\"\n           "
        "       }, {\n                    \"left\" : {\n                      "
        "\"left\" : {\n                        \"node\" : \"lvalue\",\n        "
        "                \"root\" : \"c\"\n                      },\n          "
        "            \"node\" : \"relation_expression\",\n                     "
        " \"right\" : {\n                        \"node\" : "
        "\"constant_literal\",\n                        \"root\" : \"*e\"\n    "
        "                  },\n                      \"root\" : [\"==\"]\n     "
        "               },\n                    \"node\" : \"statement\",\n    "
        "                \"right\" : [{\n                        \"left\" : "
        "[{\n                            \"node\" : \"lvalue\",\n              "
        "              \"root\" : \"i\"\n                          }],\n       "
        "                 \"node\" : \"statement\",\n                        "
        "\"root\" : \"return\"\n                      }, null],\n              "
        "      \"root\" : \"if\"\n                  }, {\n                    "
        "\"left\" : [\"init\"],\n                    \"node\" : "
        "\"statement\",\n                    \"root\" : \"goto\"\n             "
        "     }],\n                \"root\" : \"case\"\n              }],\n    "
        "        \"root\" : \"switch\"\n          }, {\n            \"left\" : "
        "{\n              \"left\" : {\n                \"node\" : "
        "\"constant_literal\",\n                \"root\" : \"0\"\n             "
        " },\n              \"node\" : \"relation_expression\",\n              "
        "\"right\" : {\n                \"left\" : {\n                  "
        "\"node\" : \"lvalue\",\n                  \"root\" : \"c\"\n          "
        "      },\n                \"node\" : \"relation_expression\",\n       "
        "         \"right\" : {\n                  \"left\" : {\n              "
        "      \"node\" : \"lvalue\",\n                    \"root\" : \"c\"\n  "
        "                },\n                  \"node\" : "
        "\"relation_expression\",\n                  \"right\" : {\n           "
        "         \"node\" : \"constant_literal\",\n                    "
        "\"root\" : \"9\"\n                  },\n                  \"root\" : "
        "[\"<=\"]\n                },\n                \"root\" : [\"&\"]\n    "
        "          },\n              \"root\" : [\"<=\"]\n            },\n     "
        "       \"node\" : \"statement\",\n            \"right\" : [{\n        "
        "        \"left\" : [{\n                    \"left\" : [[{\n           "
        "               \"left\" : {\n                            \"node\" : "
        "\"lvalue\",\n                            \"root\" : \"m\"\n           "
        "               },\n                          \"node\" : "
        "\"assignment_expression\",\n                          \"right\" : {\n "
        "                           \"left\" : {\n                             "
        " \"node\" : \"number_literal\",\n                              "
        "\"root\" : 10\n                            },\n                       "
        "     \"node\" : \"relation_expression\",\n                            "
        "\"right\" : {\n                              \"left\" : {\n           "
        "                     \"node\" : \"lvalue\",\n                         "
        "       \"root\" : \"m\"\n                              },\n           "
        "                   \"node\" : \"relation_expression\",\n              "
        "                \"right\" : {\n                                "
        "\"left\" : {\n                                  \"node\" : "
        "\"lvalue\",\n                                  \"root\" : \"c\"\n     "
        "                           },\n                                "
        "\"node\" : \"relation_expression\",\n                                "
        "\"right\" : {\n                                  \"node\" : "
        "\"constant_literal\",\n                                  \"root\" : "
        "\"0\"\n                                },\n                           "
        "     \"root\" : [\"-\"]\n                              },\n           "
        "                   \"root\" : [\"+\"]\n                            "
        "},\n                            \"root\" : [\"*\"]\n                  "
        "        },\n                          \"root\" : [\"=\", null]\n      "
        "                  }]],\n                    \"node\" : "
        "\"statement\",\n                    \"root\" : \"rvalue\"\n           "
        "       }, {\n                    \"left\" : [\"loop\"],\n             "
        "       \"node\" : \"statement\",\n                    \"root\" : "
        "\"goto\"\n                  }],\n                \"node\" : "
        "\"statement\",\n                \"root\" : \"block\"\n              "
        "}, null],\n            \"root\" : \"if\"\n          }, {\n            "
        "\"left\" : [\"syntax\"],\n            \"node\" : \"statement\",\n     "
        "       \"root\" : \"label\"\n          }, {\n            \"left\" : "
        "[[{\n                  \"left\" : {\n                    \"node\" : "
        "\"lvalue\",\n                    \"root\" : \"printf\"\n              "
        "    },\n                  \"node\" : \"function_expression\",\n       "
        "           \"right\" : [{\n                      \"node\" : "
        "\"string_literal\",\n                      \"root\" : \"\\\"bad "
        "syntax*n\\\"\"\n                    }],\n                  \"root\" : "
        "\"printf\"\n                }]],\n            \"node\" : "
        "\"statement\",\n            \"root\" : \"rvalue\"\n          }, {\n   "
        "         \"left\" : [{\n                \"left\" : {\n                "
        "  \"node\" : \"number_literal\",\n                  \"root\" : 1\n    "
        "            },\n                \"node\" : \"unary_expression\",\n    "
        "            \"root\" : [\"-\"]\n              }],\n            "
        "\"node\" : \"statement\",\n            \"root\" : \"return\"\n        "
        "  }],\n        \"node\" : \"statement\",\n        \"root\" : "
        "\"block\"\n      },\n      \"root\" : \"convert\"\n    }],\n  "
        "\"node\" : \"program\",\n  \"root\" : \"definitions\"\n}\n";

    JSON large_json = json::JSON::load(AST.data());
    large_json.dump_keys();
    std::cout << std::endl << large_json.dump() << std::endl;
}
